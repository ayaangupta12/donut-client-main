package net.lax1dude.eaglercraft;

import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_ARRAY_BUFFER;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_CLAMP;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_COLOR_BUFFER_BIT;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_DEPTH_BUFFER_BIT;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_FLOAT;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_FRAGMENT_SHADER;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_NEAREST;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_RGBA;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_STATIC_DRAW;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_TEXTURE0;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_TEXTURE_2D;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_TEXTURE_MAG_FILTER;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_TEXTURE_MIN_FILTER;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_TEXTURE_WRAP_S;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_TEXTURE_WRAP_T;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_TRIANGLES;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_UNSIGNED_BYTE;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wGL_VERTEX_SHADER;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wgetShaderHeader;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglActiveTexture;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglAttachShader;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglBindAttributeLocation;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglBindBuffer;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglBindTexture;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglBindVertexArray;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglBufferData0;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglClear;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglClearColor;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglCompileShader;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglCreateBuffer;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglCreateProgram;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglCreateShader;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglCreateVertexArray;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglDeleteShader;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglDeleteTextures;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglDeleteVertexArray;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglDetachShader;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglDisableVertexAttribArray;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglDrawArrays;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglEnableVertexAttribArray;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglFlush;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglGenTextures;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglGetUniformLocation;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglLinkProgram;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglShaderSource;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglTexImage2D;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglTexParameteri;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglUniform1i;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglUniform2f;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglUseProgram;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglVertexAttribPointer;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2._wglViewport;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2.getCanvasHeight;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2.getCanvasWidth;
import static net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2.updateDisplay;

import java.nio.IntBuffer;



import org.teavm.jso.browser.Window;

import org.teavm.jso.dom.html.HTMLDocument;
import org.teavm.jso.dom.html.HTMLElement;


import net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2.BufferArrayGL;
import net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2.BufferGL;
import net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2.ProgramGL;
import net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2.ShaderGL;
import net.lax1dude.eaglercraft.adapter.EaglerAdapterImpl2.TextureGL;
import net.minecraft.src.GLAllocation;

public class EarlyLoadScreen {
	
	public static final String loadScreen = "";
	public static final String enableScreen = "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";

	private static BufferGL vbo = null;
	private static ProgramGL program = null;
	
	public static void paintScreen() {
		HTMLDocument docElem = Window.current().getDocument();
		HTMLElement bodyElem = docElem.getBody();
		//Window.alert("test");
		HTMLElement imgElem = docElem.createElement("img");
		HTMLElement divElem = docElem.createElement("div");
		imgElem.setAttribute("src", "./koneClientHd.png");
		imgElem.setAttribute("style", "width:50vw; position:absolute; top: 43vh; left: 50vw; transform: translate(-50%, -50%);");
		divElem.setAttribute("style", "z-index:100; width: 100vw; height: 100vh; position: absolute; top: 0px; left: 0px; background-color: white;");
		divElem.setAttribute("id", "loadDiv");
		bodyElem.appendChild(divElem);
		divElem.appendChild(imgElem);
		HTMLElement divElemLoadBar = docElem.createElement("div");
		divElemLoadBar.setAttribute("style", "width: 80vw; height: 25px; position: absolute; top: 80vh; left: 50vw; transform: translateX(-50%); background-color: white; border-radius: 25px; border: solid 5px black;");
		divElem.appendChild(divElemLoadBar);
		HTMLElement divElemLoadBarInside = docElem.createElement("div");
		divElemLoadBarInside.setAttribute("style", "width: 0px; height: 35px; position: absolute; top: 80vh; left: 10vw; background-color: black; border-radius: 25px; transition: width 2s linear;");
		divElemLoadBarInside.setAttribute("id", "loadBarInside");
		divElem.appendChild(divElemLoadBarInside);
		HTMLElement scriptTransitionWait = docElem.createElement("script");
		scriptTransitionWait.setInnerHTML("setTimeout(() => {document.getElementById(\"loadBarInside\").style.width = \"80.1vw\"}, 1);");
		divElem.appendChild(scriptTransitionWait);

		TextureGL tex = _wglGenTextures();
		_wglActiveTexture(_wGL_TEXTURE0);
		_wglBindTexture(_wGL_TEXTURE_2D, tex);
		_wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_MAG_FILTER, _wGL_NEAREST);
		_wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_MIN_FILTER, _wGL_NEAREST);
		_wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_WRAP_S, _wGL_CLAMP);
		_wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_WRAP_T, _wGL_CLAMP);
		//EaglerImage img = EaglerImage.loadImage(Base64.decodeBase64(loadScreen));
		EaglerImage img = EaglerAdapter.loadPNG(Base64.decodeBase64(loadScreen));
		IntBuffer upload = GLAllocation.createDirectIntBuffer(192*192);
		upload.put(img.data);
		upload.flip();
		_wglTexImage2D(_wGL_TEXTURE_2D, 0, _wGL_RGBA, 192, 192, 0, _wGL_RGBA, _wGL_UNSIGNED_BYTE, upload);
		
		upload.clear();
		upload.put(Float.floatToIntBits(0.0f)); upload.put(Float.floatToIntBits(0.0f));
		upload.put(Float.floatToIntBits(0.0f)); upload.put(Float.floatToIntBits(1.0f));
		upload.put(Float.floatToIntBits(1.0f)); upload.put(Float.floatToIntBits(0.0f));
		upload.put(Float.floatToIntBits(1.0f)); upload.put(Float.floatToIntBits(0.0f));
		upload.put(Float.floatToIntBits(0.0f)); upload.put(Float.floatToIntBits(1.0f));
		upload.put(Float.floatToIntBits(1.0f)); upload.put(Float.floatToIntBits(1.0f));
		upload.flip();
			
		vbo = _wglCreateBuffer();
		_wglBindBuffer(_wGL_ARRAY_BUFFER, vbo);
		_wglBufferData0(_wGL_ARRAY_BUFFER, upload, _wGL_STATIC_DRAW);

		ShaderGL vert = _wglCreateShader(_wGL_VERTEX_SHADER);
		_wglShaderSource(vert, _wgetShaderHeader()+"\nprecision lowp float; in vec2 a_pos; out vec2 v_pos; void main() { gl_Position = vec4(((v_pos = a_pos) - 0.5) * vec2(2.0, -2.0), 0.0, 1.0); }");
		_wglCompileShader(vert);
		
		ShaderGL frag = _wglCreateShader(_wGL_FRAGMENT_SHADER);
		_wglShaderSource(frag, _wgetShaderHeader()+"\nprecision lowp float; in vec2 v_pos; out vec4 fragColor; uniform sampler2D tex; uniform vec2 aspect; void main() { fragColor = vec4(texture(tex, clamp(v_pos * aspect - ((aspect - 1.0) * 0.5), 0.02, 0.98)).rgb, 1.0); }");
		_wglCompileShader(frag);
		
		program = _wglCreateProgram();
		
		_wglAttachShader(program, vert);
		_wglAttachShader(program, frag);
		_wglBindAttributeLocation(program, 0, "a_pos");
		_wglLinkProgram(program);
		_wglDetachShader(program, vert);
		_wglDetachShader(program, frag);
		_wglDeleteShader(vert);
		_wglDeleteShader(frag);
		
		try {
			Thread.sleep(50l);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		_wglUseProgram(program);
		_wglUniform1i(_wglGetUniformLocation(program, "tex"), 0);

		int width = getCanvasWidth();
		int height = getCanvasHeight();
		float x, y;
		if(width > height) {
			x = (float)width / (float)height;
			y = 1.0f;
		}else {
			x = 1.0f;
			y = (float)height / (float)width;
		}
		
		_wglActiveTexture(_wGL_TEXTURE0);
		_wglBindTexture(_wGL_TEXTURE_2D, tex);
		
		_wglViewport(0, 0, width, height);
		_wglClearColor(1.0f, 1.0f, 1.0f, 1.0f);
		_wglClear(_wGL_COLOR_BUFFER_BIT | _wGL_DEPTH_BUFFER_BIT);
		
		_wglUniform2f(_wglGetUniformLocation(program, "aspect"), x, y);
		
		BufferArrayGL vao = _wglCreateVertexArray();
		_wglBindVertexArray(vao);
		_wglEnableVertexAttribArray(0);
		_wglVertexAttribPointer(0, 2, _wGL_FLOAT, false, 8, 0);
		_wglDrawArrays(_wGL_TRIANGLES, 0, 6);
		_wglDisableVertexAttribArray(0);
		_wglFlush();
		updateDisplay();

		_wglUseProgram(null);
		_wglBindBuffer(_wGL_ARRAY_BUFFER, null);
		_wglBindTexture(_wGL_TEXTURE_2D, null);
		_wglDeleteTextures(tex);
		_wglDeleteVertexArray(vao);
		
	}
	
	public static void paintEnable() {
		
		TextureGL tex = _wglGenTextures();
		_wglActiveTexture(_wGL_TEXTURE0);
		_wglBindTexture(_wGL_TEXTURE_2D, tex);
		_wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_MAG_FILTER, _wGL_NEAREST);
		_wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_MIN_FILTER, _wGL_NEAREST);
		_wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_WRAP_S, _wGL_CLAMP);
		_wglTexParameteri(_wGL_TEXTURE_2D, _wGL_TEXTURE_WRAP_T, _wGL_CLAMP);
		//EaglerImage img = EaglerImage.loadImage(Base64.decodeBase64(enableScreen));
		EaglerImage img = EaglerAdapter.loadPNG(Base64.decodeBase64(enableScreen));
		IntBuffer upload = GLAllocation.createDirectIntBuffer(128*128);
		upload.put(img.data);
		upload.flip();
		_wglTexImage2D(_wGL_TEXTURE_2D, 0, _wGL_RGBA, 128, 128, 0, _wGL_RGBA, _wGL_UNSIGNED_BYTE, upload);
		
		try {
			Thread.sleep(50l);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}


		
		HTMLDocument docElem = Window.current().getDocument();
		HTMLElement bodyElem = docElem.getBody();
		HTMLElement loadDiv = docElem.getElementById("loadDiv");
		bodyElem.removeChild(loadDiv);
		


		
		_wglUseProgram(program);

		int width = getCanvasWidth();
		int height = getCanvasHeight();
		float x, y;
		if(width > height) {
			x = (float)width / (float)height;
			y = 1.0f;
		}else {
			x = 1.0f;
			y = (float)height / (float)width;
		}
		
		_wglActiveTexture(_wGL_TEXTURE0);
		_wglBindTexture(_wGL_TEXTURE_2D, tex);
		
		_wglViewport(0, 0, width, height);
		_wglClearColor(1.0f, 1.0f, 1.0f, 1.0f);
		_wglClear(_wGL_COLOR_BUFFER_BIT | _wGL_DEPTH_BUFFER_BIT);
		
		_wglUniform2f(_wglGetUniformLocation(program, "aspect"), x, y);

		BufferArrayGL vao = _wglCreateVertexArray();
		_wglBindVertexArray(vao);
		_wglBindBuffer(_wGL_ARRAY_BUFFER, vbo);
		_wglEnableVertexAttribArray(0);
		_wglVertexAttribPointer(0, 2, _wGL_FLOAT, false, 8, 0);
		_wglDrawArrays(_wGL_TRIANGLES, 0, 6);
		_wglDisableVertexAttribArray(0);
		_wglFlush();
		updateDisplay();

		_wglUseProgram(null);
		_wglBindBuffer(_wGL_ARRAY_BUFFER, null);
		_wglBindTexture(_wGL_TEXTURE_2D, null);
		_wglDeleteTextures(tex);
		_wglDeleteVertexArray(vao);
		
	}
	
}
